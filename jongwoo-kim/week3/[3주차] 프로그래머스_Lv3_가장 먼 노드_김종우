import java.util.*

class Solution {

    private lateinit var graph: Array<ArrayList<Int>> 
    private lateinit var visited: BooleanArray
    private lateinit var distances: IntArray
    private var nodeCount = 0

    fun solution(n: Int, edges: Array<IntArray>): Int {
        var answer = 0
        nodeCount = n
        graph = Array(n + 1) { ArrayList() }
        distances = IntArray(n + 1) { 0 }
        visited = BooleanArray(n + 1)

        for (edge in edges) {
            graph[edge[0]].add(edge[1])
            graph[edge[1]].add(edge[0])
        }

        bfs()

        distances.sortDescending()

        val maxDistance = distances[0]

        for (distance in distances) {
            if (distance == maxDistance) {
                answer++
            } else {
                break
            }
        }

        return answer
    }

    private fun bfs() {
        val queue: LinkedList<Int> = LinkedList()
        visited[1] = true
        queue.add(1)
        distances[1] = 1

        while (queue.isNotEmpty()) {
            val currentNode = queue.poll()

            for (neighbor in graph[currentNode]) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true
                    distances[neighbor] = distances[currentNode] + 1
                    queue.add(neighbor)
                }
            }
        }
    }
}

fun main() {
    val solution = Solution()
    val result = solution.solution(
        6, arrayOf(
            intArrayOf(3, 6),
            intArrayOf(4, 3),
            intArrayOf(3, 2),
            intArrayOf(1, 3),
            intArrayOf(1, 2),
            intArrayOf(2, 4),
            intArrayOf(5, 2)
        )
    )
    println(result)
}
