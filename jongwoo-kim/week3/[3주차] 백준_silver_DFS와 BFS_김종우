import java.io.*
import java.util.*

private var graph = Array(0) { Array(0) { 0 } }
private var visited = Array(0) { false }
private var sb = StringBuilder()

private var N = 0
private var M = 0

fun main() {
    val br = BufferedReader(InputStreamReader(System.`in`))
    val st = StringTokenizer(br.readLine())

    N = st.nextToken().toInt() // 정점의 개수
    M = st.nextToken().toInt() // 간선의 개수
    val startNode = st.nextToken().toInt() // 시작 노드
    graph = Array(N + 1) { Array(N + 1) { 0 } }
    visited = Array(N + 1) { false }

    // 그래프 입력 받기
    repeat(M) {
        val edge = StringTokenizer(br.readLine())
        val x = edge.nextToken().toInt()
        val y = edge.nextToken().toInt()

        graph[x][y] = 1
        graph[y][x] = 1
    }

    // DFS 탐색
    dfs(startNode)
    sb.append('\n')

    // 방문 초기화 후 BFS 탐색
    visited = Array(N + 1) { false }
    bfs(startNode)

    println(sb)
}

fun dfs(node: Int) {
    visited[node] = true
    sb.append("$node ")

    for (i in 1..N) {
        if (graph[node][i] == 1 && !visited[i]) {
            dfs(i)
        }
    }
}

fun bfs(node: Int) {
    val queue: Queue<Int> = LinkedList()
    queue.offer(node)
    visited[node] = true
    sb.append("$node ")

    while (queue.isNotEmpty()) {
        val current = queue.poll()

        for (i in 1..N) {
            if (graph[current][i] == 1 && !visited[i]) {
                queue.offer(i)
                visited[i] = true
                sb.append("$i ")
            }
        }
    }
}
