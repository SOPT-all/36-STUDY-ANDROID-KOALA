import java.io.BufferedReader
import java.io.BufferedWriter
import java.io.InputStreamReader
import java.io.OutputStreamWriter

lateinit var map: ArrayList<CharArray> // Map of the grid
lateinit var firePositions: ArrayList<Pair<Int, Int>> // Positions of fire
lateinit var visited: ArrayList<BooleanArray> // Visited cells tracker
var rows = 0
var cols = 0
var result = 1
lateinit var startPosition: ArrayList<Pair<Int, Int>> // Starting positions for the person
val directionsX = listOf(0, 0, 1, -1) // Directions for moving in x-axis
val directionsY = listOf(1, -1, 0, 0) // Directions for moving in y-axis

fun main() {
    val br = BufferedReader(InputStreamReader(System.`in`))
    val bw = BufferedWriter(OutputStreamWriter(System.out))

    val input = br.readLine().split(" ").map { it.toInt() }
    rows = input[0]
    cols = input[1]
    map = arrayListOf()
    visited = arrayListOf()
    firePositions = arrayListOf()

    repeat(rows) {
        visited.add(BooleanArray(cols) { false })
        map.add(br.readLine().toCharArray())
    }

    startPosition = arrayListOf()
    for (i in 0 until rows) {
        for (j in 0 until cols) {
            if (map[i][j] == 'F') firePositions.add(Pair(i, j))
            else if (map[i][j] == 'J') {
                startPosition.add(Pair(i, j))
                visited[i][j] = true
            }
        }
    }

    val x = startPosition[0].first
    val y = startPosition[0].second
    if (((x == 0 || x == rows - 1) && y in 0 until cols) || (x in 0 until rows && (y == 0 || y == cols - 1))) bw.write("1")
    else {
        if (bfs(startPosition, firePositions)) bw.write(result.toString())
        else bw.write("IMPOSSIBLE")
    }

    bw.flush()
    bw.close()
}

fun bfs(person: ArrayList<Pair<Int, Int>>, fire: ArrayList<Pair<Int, Int>>): Boolean {
    var nextPersonPositions = arrayListOf<Pair<Int, Int>>()
    var nextFirePositions = arrayListOf<Pair<Int, Int>>()
    result++

    fire.forEach {
        val (fx, fy) = it
        repeat(4) { i ->
            val nx = fx + directionsX[i]
            val ny = fy + directionsY[i]
            if (nx in 0 until rows && ny in 0 until cols && map[nx][ny] != '#' && map[nx][ny] != 'F') {
                map[nx][ny] = 'F'
                nextFirePositions.add(Pair(nx, ny))
            }
        }
    }

    person.forEach {
        val (px, py) = it
        repeat(4) { i ->
            val nx = px + directionsX[i]
            val ny = py + directionsY[i]
            if (((nx == 0 || nx == rows - 1) && ny in 0 until cols) || (nx in 0 until rows && (ny == 0 || ny == cols - 1))) {
                if (map[nx][ny] == '.') return true
            }
            if (nx in 0 until rows && ny in 0 until cols && map[nx][ny] == '.' && !visited[nx][ny]) {
                visited[nx][ny] = true
                nextPersonPositions.add(Pair(nx, ny))
            }
        }
    }

    if (nextPersonPositions.isEmpty()) return false
    return bfs(nextPersonPositions, nextFirePositions)
}
