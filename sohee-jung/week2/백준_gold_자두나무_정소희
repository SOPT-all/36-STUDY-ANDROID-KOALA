import java.io.*;
import java.util.StringTokenizer;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        StringTokenizer st = new StringTokenizer(br.readLine());

        int T = Integer.parseInt(st.nextToken());
        int W = Integer.parseInt(st.nextToken());

        int[] jaduArr = new int[T+1];

        for (int i = 1; i <= T ; i++) {
            jaduArr[i] = Integer.parseInt(br.readLine());
        }

        int[][] dp = new int[W+1][T+1];
        int result = 0;

        for (int t = 1; t <= T; t++) {
            dp[0][t] = dp[0][t - 1];
            if (jaduArr[t] == 1) {
                dp[0][t]++;
            }
            result = Math.max(result, dp[0][t]);
        }

        for (int w = 1; w <= W; w++) {
            for (int t = 1; t <= T ; t++) {
                int currentTree;
                if (w % 2 == 0) {
                    currentTree = 1;
                } else {
                    currentTree = 2;
                }

                dp[w][t] = Math.max(dp[w][t], dp[w][t - 1]);

                if (jaduArr[t] == currentTree) {
                    dp[w][t] = Math.max(dp[w][t], dp[w][t - 1] + 1);
                    dp[w][t] = Math.max(dp[w][t], dp[w - 1][t - 1] + 1);
                } else {
                    dp[w][t] = Math.max(dp[w][t], dp[w - 1][t - 1]);
                }

                result = Math.max(result, dp[w][t]);
            }
        }

        bw.write(result + "\n");

        bw.flush();
        br.close();
        bw.close();
    }
}