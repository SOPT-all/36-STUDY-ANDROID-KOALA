import java.util.*;

class Solution {
    public int solution(int n, int[][] edge) {
        // 그래프 인접 리스트 초기화
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i <= n; i++) {
            graph.add(new ArrayList<>());
        }

        // 간선 정보로 그래프 구성 (양방향)
        for (int[] e : edge) {
            graph.get(e[0]).add(e[1]);
            graph.get(e[1]).add(e[0]);
        }

        // 각 노드까지 거리 저장 배열 (-1은 미방문 상태)
        int[] distance = new int[n + 1];
        Arrays.fill(distance, -1);
        Queue<Integer> queue = new LinkedList<>();

        // 1번 노드에서 시작
        queue.offer(1);
        distance[1] = 0;

        // BFS 수행
        while (!queue.isEmpty()) {
            int current = queue.poll();
            for (int next : graph.get(current)) {
                if (distance[next] == -1) {
                    distance[next] = distance[current] + 1;
                    queue.offer(next);
                }
            }
        }

        // 최댓값 거리 탐색
        int maxDistance = 0;
        for (int d : distance) {
            if (d > maxDistance) {
                maxDistance = d;
            }
        }

        // 최댓값 거리인 노드 개수 카운트
        int count = 0;
        for (int d : distance) {
            if (d == maxDistance) {
                count++;
            }
        }

        return count;
    }
}
