package week3;

import java.io.*;
import java.util.*;

public class Main {
    static int R, C;
    static char[][] map;
    static int[][] fireTime, jihoonTime;
    static boolean[][] visited;
    static Queue<int[]> fireQueue = new LinkedList<>();
    static Queue<int[]> jihoonQueue = new LinkedList<>();
    static int[] dx = {-1, 1, 0, 0};
    static int[] dy = {0, 0, -1, 1};

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        R = Integer.parseInt(st.nextToken());
        C = Integer.parseInt(st.nextToken());

        map = new char[R][C];
        fireTime = new int[R][C];
        jihoonTime = new int[R][C];
        visited = new boolean[R][C];

        for (int i = 0; i < R; i++) {
            Arrays.fill(fireTime[i], -1);
            Arrays.fill(jihoonTime[i], -1);
        }

        for (int i = 0; i < R; i++) {
            String line = br.readLine();
            for (int j = 0; j < C; j++) {
                map[i][j] = line.charAt(j);
                if (map[i][j] == 'F') {
                    fireQueue.offer(new int[]{i, j});
                    fireTime[i][j] = 0;
                } else if (map[i][j] == 'J') {
                    jihoonQueue.offer(new int[]{i, j});
                    jihoonTime[i][j] = 0;
                    visited[i][j] = true;
                }
            }
        }

        while (!fireQueue.isEmpty()) {
            int[] cur = fireQueue.poll();
            for (int d = 0; d < 4; d++) {
                int nx = cur[0] + dx[d];
                int ny = cur[1] + dy[d];
                if (nx >= 0 && nx < R && ny >= 0 && ny < C) {
                    if (map[nx][ny] != '#' && fireTime[nx][ny] == -1) {
                        fireTime[nx][ny] = fireTime[cur[0]][cur[1]] + 1;
                        fireQueue.offer(new int[]{nx, ny});
                    }
                }
            }
        }

        // BFS for Jihoon
        while (!jihoonQueue.isEmpty()) {
            int[] cur = jihoonQueue.poll();
            for (int d = 0; d < 4; d++) {
                int nx = cur[0] + dx[d];
                int ny = cur[1] + dy[d];
                // 탈출 조건: 가장자리
                if (nx < 0 || nx >= R || ny < 0 || ny >= C) {
                    System.out.println(jihoonTime[cur[0]][cur[1]] + 1);
                    return;
                }
                if (map[nx][ny] == '.' && !visited[nx][ny]) {
                    // 불보다 먼저 도착할 수 있을 때만 이동
                    if (fireTime[nx][ny] == -1 || jihoonTime[cur[0]][cur[1]] + 1 < fireTime[nx][ny]) {
                        jihoonTime[nx][ny] = jihoonTime[cur[0]][cur[1]] + 1;
                        visited[nx][ny] = true;
                        jihoonQueue.offer(new int[]{nx, ny});
                    }
                }
            }
        }

        System.out.println("IMPOSSIBLE");
    }
}
